$screen-padding: 8px;
$card-width: calc(
  min(
    100vw - 2 *
      $screen-padding - env(safe-area-inset-left) - env(safe-area-inset-right),
    500px
  )
);

.drawerContainer {
  position: fixed;
  inset: 0px;
  z-index: 100;

  &.showDrawer {
    background-color: rgb(0 0 0 / 0.4);

    .card {
      height: auto;
      // width: auto;
    }
  }

  .card {
    position: absolute;
    border-radius: 18px;
    overflow: hidden;

    width: $card-width;

    .animateExpansion {
      display: flex;
      flex-wrap: nowrap;
      width: $card-width;
      margin: 0px;
      overflow: visible;

      // Emulate navigation, use translateX for smooth transitions
      @for $i from 2 through 10 {
        &:has(.scroller.showContent:nth-of-type(#{$i})) {
          transform: translateX(calc(-100% * (#{$i} - 1)));
        }
      }

      .scroller {
        overflow: auto;
        width: $card-width;
        flex-shrink: 0;

        .cardContent {
          padding: 2rem;
        }
      }
    }
  }
}

@media only screen and (min-width: 640px) {
  .drawerContainer {
    .card {
      .animateExpansion {
        height: calc(min(100dvh - 2 * $screen-padding, var(--content-height)));
      }

      // Left/right drawers:
      &.from-left,
      &.from-right {
        bottom: $screen-padding;
      }
      &.from-left {
        left: $screen-padding;
        transform: translateX(calc(-100% - #{$screen-padding}));
      }
      &.from-right {
        right: $screen-padding;
        transform: translateX(calc(100% + #{$screen-padding}));
      }

      // Top/bottom drawers:
      &.from-top,
      &.from-bottom {
        left: $screen-padding;
      }
      &.from-top {
        top: $screen-padding;
        transform: translateY(calc(-100% - #{$screen-padding}));
      }
      &.from-bottom {
        bottom: $screen-padding;
        transform: translateY(calc(100% + #{$screen-padding}));
      }
    }

    &.showDrawer {
      .card {
        // Left/right drawers:
        &.from-left,
        &.from-right {
          width: $card-width;
          height: auto; // calc(100% - 2 * $screen-padding);
        }
        &.from-left {
          transform: translateX(calc(-100% - #{$screen-padding}));
        }
        &.from-right {
          transform: translateX(calc(100% + #{$screen-padding}));
        }

        // Top/bottom drawers:
        &.from-top,
        &.from-bottom {
          width: calc(100% - 2 * $screen-padding);
          height: auto; // calc(75vh - 2 * $screen-padding);
        }
        &.from-top {
          transform: translateY(calc(-100% - #{$screen-padding}));
        }
        &.from-bottom {
          transform: translateY(calc(100% + #{$screen-padding}));
        }
      }
    }
  }
}

@media only screen and (max-width: 640px) {
  .drawerContainer {
    .card {
      .animateExpansion {
        height: calc(min(75vh - 2 * $screen-padding, var(--content-height)));
      }

      // Mobile left/right drawers:
      &.mobile-from-left,
      &.mobile-from-right {
        width: $card-width;
        height: auto; // calc(75vh - 2 * $screen-padding);
        bottom: $screen-padding;
      }
      &.mobile-from-left {
        left: $screen-padding;
        transform: translateX(calc(-100% - #{$screen-padding}));
      }
      &.mobile-from-right {
        right: $screen-padding;
        transform: translateX(calc(100% + #{$screen-padding}));
      }

      // Mobile top/bottom drawers:
      &.mobile-from-top,
      &.mobile-from-bottom {
        width: calc(100% - 2 * $screen-padding);
        height: auto; // calc(75vh - 2 * $screen-padding);
        left: $screen-padding;
      }
      &.mobile-from-top {
        top: $screen-padding;
        transform: translateY(calc(-100% - #{$screen-padding}));
      }
      &.mobile-from-bottom {
        bottom: $screen-padding;
        transform: translateY(calc(100% + #{$screen-padding}));
      }
    }
  }
}

/* When the drawer is shown, override the transforms so the card slides into view */
.drawerContainer.showDrawer {
  .card {
    &.from-left,
    &.from-right,
    &.from-top,
    &.from-bottom,
    &.mobile-from-left,
    &.mobile-from-right,
    &.mobile-from-top,
    &.mobile-from-bottom {
      transform: translate(env(safe-area-inset-left), 0);
    }
  }
}

@layer transitions {
  $duration: 300ms;
  $timing: cubic-bezier(0.8, 0, 0.2, 1);
  .drawerContainer {
    transition: background-color $duration ease-in-out;

    .card {
      transition: transform $duration $timing;

      .animateExpansion {
        transition:
          height $duration $timing,
          transform $duration $timing;
        will-change: height;
      }
    }

    &.showDrawer {
      transition: background-color $duration ease-in-out 0ms;
      .card {
        transition: transform $duration $timing;
      }
    }
  }
}
